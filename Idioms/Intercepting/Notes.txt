Ok so what's the deal here?  This is where we can inject/hook/tweak LogicOfTo, and do so in a fluent, runtime-y manner.  

Throughout the design of decoratid you'll see decorative idioms around some well known behaviour (Logic, Conditions, ValueOf).
The intercept mechanism is a different type of decoration.  It allows decorations of the participants in LogicOfTo, that is, 
argument, logic and result.  It transforms the behaviour into a format that can be more fluently modified.  

So while decoration applies layers to known things, Interception applies layers to operations.  The "operation" is normalized
as LogicOfTo.  

I envision things like this.  Polyface fans out distinct verticals of responsibility.  Decorations decorate these
verticals.  Interception decorates the operationality of operations - it fans into the operation.

The InterceptChain maintains events that can be subscribed to, and a managing method that will spawn a unit of work.

How interception is done:
	For a given LogicOfTo operation, an interceptChain is created.  Layers are added to this chain.  An intercept layer
	Adjusts and Observes argument, result and logic.  Layers implement Dependency defining when each layer applies.
	
	To invoke the interception an InterceptUnitOfWork instance is created given an intercept chain.  One can think of the 
	intercept chain as being the template.  When InterceptUnitOfWork is invoked, decorations are built up for Arg, Logic and
	Result based on the chain's template.  Then the decorations are all invoked.  

	
 

