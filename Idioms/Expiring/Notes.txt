Deals with the idea of expiry. 

IExpirable defines the core idea.  IHasExpirable composites an IExpirable instance.

ITouchable defines something can can be touched, with the intent that being touched mutates the touchable in some way.
  This is useful in things like cached items, where each interaction with the cached item should keep the item alive 
  for a little bit longer.

Some containers are polyfacing, as they're intended for composition.  
Eg. NaturalDatedExpirable, NaturalFloatingDatedExpirable, HasExpirable

Fluently polyfaced as:
	polyface.IsDatedExpirable(date); - attaches a new expirable
	polyface.AsDatedExpirable(); - returns the expirable
	polyface.IsFloatingDatedExpirable(date, touchingIncrSecs); - attaches a new floating expirable
	polyface.AsFloatingDatedExpirable(); - returns the expirable

	or, if we want to take advantage of the decorative expirables :

	polyface.IsHasExpirable(NaturalFalseExpirable.New().ExpiresOn(when).Float(50 seconds));

		Expirable instances themselves can also be decorated up to provide the functionality of NaturalDated, for example.  

		// creates a blank expiry, decorates it with date expiry, decorates with floating date
		NaturalFalseExpirable.New().ExpiresOn(when).Float(50 seconds); 

		//if a window is desired
		NaturalFalseExpirable.New().InWindow(start, end).Float(50 seconds);

	I think probably the best way to polyface is with the IsHasExpirable call.  This gives us composition that 
	can be decorated.

Fluently decorated as: (note: they all follow the IHasExpirable composition)
	valueOf.HasExpirable(expirable);
	logic.HasExpirable(expirable);
	condition.HasExpirable(expirable);


The "HasA" approach.
-define HasA interface, IHasExpirable, that wraps Expirable
-define HasExpirable container that implements IHasExpirable
-implement IHasExpirable on the appropriate Core types
-define fluent methods that have a "this" of IHasExpirable, for each decoration
	-these fluent methods will decorate the Expirable property of IHasExpirable.  In other words, wraplace the wrapped instance.
-define a single fluent method, HasExpirable() that will decorate with IHasExpirable.
	-the parameterless Expires method sets IHasExpirable.Expirable to the default expirable (NaturalFalseExpirable)
	-Expires also has an overload with a single parameter, which lets us specify the expirable we're using

The use of a container (eg. HasExpirable) to hold the behaviour allows us to easily wraplace/decorate, and to do so fluently.
It also gives us consistency in the application of decorations whether using Core types or Polyface.
