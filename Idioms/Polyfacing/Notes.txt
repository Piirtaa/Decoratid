Notes on Polyface / Polyfacing

A Polyface is internally a dictionary of "Faces", keyed by both Type and name,
that externally is a register of instances by type and name.  
  It has the fluent signatures:
	Is<T> (T obj) - sets a Face, keyed by type T
	Is(Type, obj) - sets a Face, keyed by type Type
	Is(name, obj) - sets a Face, keyed by name
	As<T>	- gets a Face, keyed by type T
	As(name) - gets a Face, keyed by name
	
Conceptually, a Polyface is a radiant polymorphic fluent type.  It has many faces.  
Each face can see the other.  A "Face" is something that has a backreference to a Root Polyface.
A Face is IPolyfacing.  (To convert things to IPolyfacing, see the Polyfacing decorations).

The Polyface paradigm enables some interesting functionality:
	-One can fluently design an object in a few sentences.
		eg. polyfacingThing.Polyfacing() <- makes a Polyface
				.Is<TsecondFace>(2nd face) <- adds a new face
	-Well-defined behaviours can be isolated as Faces and plug their behaviours into the Polyface
		in an aggregated fashion.   
	-One can fluenty modify behaviour:
		eg. 
			Polyface.As<1st face>.DecorateWithX.Is<1st face>();  //kablammo!  we've replaced the first face with its decoration

Conceptually, The Polyfacing paradigm is to attach instances of behaviour to a larger thing, and to coordinate this larger thing's
	attached behaviour to itself.  This differs from the Decorating paradigm which adds behaviour in layers upon a single
	core thing.  Together, both Polyfacing and Decorating allow the Trunk Behaviour to be established (via polyfacing) and
	embellished with additional behavioural concepts (via decoration).  Pretty powerful for a fluent thing.  

We get cross-cutting-ness out of this.  Full interception.  Full data portability.  Minimum of code.  
	Textual readable sentence descriptions of behaviour (think of That portability) - in other words, with a core
	set of common behaviours, things built on this are fully behaviourally portable, as Text.
	
	   
	 


	
		