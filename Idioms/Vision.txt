Below lies the roadmap, or best estimate as of 25/09/14.  Shit changes, and documents change
even less frequently.  This is where we try to keep shit canonical.

Basic Things:
	ValueOf
	Logic
	Condition
	Store
	
Common Idioms (apply to the Things)
	Thing.KackUnless(Condition)  - kacks unless the condition is true
	*Thing.WaitUntil(Condition) - delays performance of the Thing's operation until the Condition is True.  Non-kacking, blocking call that works by polling.
	Thing.Seal() - says the thing can't be decorated anymore
	Thing.LogWith(Logger) - gives a logger for the operation
	Thing.Trap() - traps exceptions from propagating on operations
	Thing.Counted() - keeps operation counter
	Thing.Polyfacing(optional Root polyface) - makes the thing polyface-compliant  (adds a polyface backref, lol), and opens up that radiant polymorphic spin

Thing-Specific Idioms
	ValueOf.Adjust(x->x) - adds an adjustment to ValueOf
	ConditionOf.WithValue(x) - gives a condition of a contextual valueOf, thus turning it into a Condition 

Store Idioms
	TODO

Task Idioms
	TODO
	Tasks are logic that is encapsulated as a trackable thing, so that it can be chained to other tasks

Polyface Idioms 
	Polyfacing.NewRoot() - creates a new polyface given the first polyfacing
	(Static)Polyface.NewRoot() - creates a blank polyface
	
	Polymorphism Idioms:
		Polyface.Is<T>(thing); - sets a face
		Polyface.As<T>();- gets a face
		
	Custom Idioms:	
		Polyface.IsEmptyBackground(); - adds an empty background face
		Polyface.IsBackground(Logic, etc) - adds a background face
		Polyface.AsBackground() - gets the background face

Custom Idioms
	Thing.ThisManyTimes(Integer) - allows the operation to be performed N times 
		
		btw the same thing could be implemented as a polyface:
		Thing.Polyface() <- make polyface
			.Is<Counter>(Counter.New())  <- add counter
			.Is<Thing> <- get the original thing we're decorating
			.KackUnless(Thing.Root.Is<Counter>().Current < N) <- decorate with a validator
			
			;		
			TODO: link Things(store, logic, condition, valueof).  ie. have events on Things for Things to subscribe to
			


The PolyFace
	-self describing
	-the fluent text to build a polyface is also easily sent  over a wire, and we have behaviour over a wire now
	-further the polyface can aggregate behaviour that exists on another node, if the Noded decoration/idiom is applied		

	what is decoration vs idiom?
		idiom describes general idea/behaviour
		decoration applies this behaviour/idea to someThing to modify its behaviour

The layout of idioms:
	declaration of behaviour in the interfaces.cs file
	examples of the behaviour that are compositable to polyface.  eg. concrete instances of Core/Natural behaviour
	decorations around the behaviour
	fluent polyfacing signature to inject Is/As Behaviour
	fluent decorating signature to apply decorations on the behaviour

Example of FTP Session
	OnCondition(

	TODO: see paper, as the idioms are named diff now



TODO LIST:
-break out core store stuff, and move store decorations into the general idioms section (identify with store prefix if stored specific)
-since we're all about aggregating behaviour we need to do this with expiry for instance
	-expiry idiom - do next
-intercepting idiom and decorations for all 4 Things, since we will use this as the basis for chaining events (events themselves 
 are an idiom/decoration and they depend on intercept or do they?? depends on implementation...see how store did it
-the idea of a Remote Natural core type for each Thing
	-need client server for each Thing, and implement std messaging.  RemoteValueOf, RemoteStore, RemoteLogic, RemoteCondition
		argument serialization is done by the rehydrating layer
-rehydrating layer is big TODO. put all the serialization stuff there so we CAN do remote shit right. getting tired of this already
	-we have all core code in the classes commented out..need to move these to maps for each complex type, and have one big bag
	of maps
-all core things must serialize to their best ability using native .net concepts.  
