
Design and Versioning of Services and Payloads
	-Services should be defined by an interface.  
	-Service interface methods should avoid polymorphism in the signature (eg. several versions of the same method).
	  Rather, a criteria/payload argument should be created that provides extension via polymorphism.  
	-Criteria types MUST be versioned.
	-Interface implementations MUST be versioned.
	 
	Notes:
	The above rules enable:
		-polymorphism in both implementation and payloads
		-payloads can be programmatically compared for compatibility with implementations, beyond a simple Type
			compatibility check.
		-locating a compatible implementation for a given payload
		-maintaining a consistent and simple service API across versions 
			
	The versioning uses semver.org as a guideline.  A version has a tag (non- semver.org concept) and 3 numbers: major.minor.patch.  The general rules
	governing this scheme are listed below:
		-Different tags ARE incompatible
		-Different major versions ARE incompatible.  
		-Given the same major version, the minor version number indicates compatibility.  Patch numbers are informative only.
			-higher minor versions MUST BE compatible to lower minor versions
			 
			 Eg.  An implementation of version 1.2.1 MUST support arguments of version 1.2, 1.1, and 1.0.
				  An implementation of version 1.2.1 MAY support arguments of version 1.3 (in the circumstance the criteria
				  properties being used are the same - for future improvement explicit comparison of criteria modes)
				  An implementation of version 1.*.* DOES NOT support arguments of 2.*.*
				  An implementation of version 2.*.* DOES NOT support arguments of 1.*.*	
  
	
	The version tag is a concept to disambiguate between the same version numbers produced by incompatible components.  
	For example, if we have a type CRIT_BASE that is used as the base type for a criteria argument in 2 different interface
	methods, it would be possible for types derived from CRIT_BASE to be passed to both implementations, even if they are
	fundamentally incompatible.  By providing a tag, it is possible for resolve this situation.

	Version as Metadata.
	The interface IHasVersion is applied to versionable types.  The implementation of 

	